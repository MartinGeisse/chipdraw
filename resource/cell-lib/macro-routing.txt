
Vias and contacts must be 2x2, surrounded by at least 1 metal1 / metal2, i.e. they need at least 4x4 metal1 / metal2.

metal1 minimum width is 3, spacing is 2.

metal2 spacing is 3 (don't know why this is larger, but if we use metal2 for power then it might not matter; we
do need stacked vias for this though.

Alternatively, attempt metal2 with 2λ spacing and try to scale that down as long as it works.

So we assume 2λ spacing for data tracks for now.

----------

This leaves a pitch of at least 5λ (width 3, spacing 2), but we can't place a via next to tracks this way. Routing
other tracks around the vias has follow-up effects that mess up the whole routing.

Next try: pitch = 6λ (width 3, spacing 3). A via has width 4, spacing 2 -> works. This should even allow vias next
to each other! A via is displaced by λ/2 compared to the metal track like this:

...mmm...mmm...
...mmm...mmm...
...mmmm..mmm...
...mvvm..mmm...
...mvvm..mmm...
...mmmm..mmm...
.........mmm...
.........mmm...

Macro-routing therefore happens in 6x6 squares which can connect to their neighbors as well as up and down (both up
and down are allowed if the process allows stacked vias).

The editor requires special support for standard cell placement. Routing could be done with the normal pixel editor
by distinguishing alternating "center" pixels and "connecting" pixels, but this is cumbersome, easy to displace the
whole design by 1 (invalidates it), needs many special rules, and so on. Better: Have the macro editor deal with
routing in terms of "pixels" which contain a routing micro-tile, not just a color.

The standard cells must therefore be a multiple of the 6x6 routing tiles in size.

----------

Problem: SCMOS says that metal2 has minimum spacing 3, so a via with 1 pixel of overlap (total size 4) plus 3 pixels
of spacing don't fit. We either have to route metal2 in a different way, or increase the routing tile size to 7.

BUT: There is another problem. We are using metal1 extensively in building the standard cells, so we cannot use
it for routing anyway. If we start with metal2, the 7-sized tiles have to be used anyway.

-> minimum size for the routing tiles: 7x7.

Next problem: metal3 is even wider, and has incompatible sizes again. Metal3 demands minimum size 10x10, but this time
a via doesn't increase the size (it already fits in 10x10). So we now have these possibilities:
- ignore the problem and hope that 7x7 works for metal3 in practice (or that metal3 is not needed, or that metal3 can
    be routed manually afterwards)
- use 10x10 even for metal2

The cell design is only minimally affected by all this -- only the placement of the vias would change slightly to align
with either a 7x7 or 10x10 grid. So I'll go on with the cells and decide afterwards. For now, my intuition says that
10x10 is not a huge downgrade for routing, and these huge sizes are only useful for experimentation anyway. For a real
process, the first steps would be to find more accurate design rules and define the design process around them. Even
now, we changed the 1.5 overlap to 2 for simplicity, so we could gain another 1 lambda just be properly dealing with
that.

